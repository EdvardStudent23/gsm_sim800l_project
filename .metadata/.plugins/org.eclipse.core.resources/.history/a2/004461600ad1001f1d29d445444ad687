/*
 * sim800l.c
 *
 *  Created on: Jan 7, 2025
 *      Author: Edward Student
// */
#include "sim800l.h"
#include "stm32f3xx_hal.h"
#include "usart.h"
#include <string.h>
#include <stdint.h>
#include <stdio.h>
//нокіа5110 екран
#include "lcd5110.h"
#include "lcd_shared.h"
// configuration file:
#include "sim800l_conf.h"


static uint8_t rx_index = 0;
static uint8_t rx_byte = 0; // Тимчасовий буфер для 1 байту
static volatile uint8_t data_ready = 0; // готовність даних, флажок

UART_HandleTypeDef *SIM800L_UART_INSTANCE;
uint8_t RxData[SIM800L_RX_BUFFER_SIZE];
uint8_t TxData[SIM800L_TX_BUFFER_SIZE];

int SIM800L_LCD_OUTPUT_ENABLED = 1;



void sim800l_send_command(const char *command) {
    snprintf((char *)TxData, sizeof(TxData), "%s\r\n", command); // Копіюємо команду у буфер

    if (SIM800L_LCD_OUTPUT_ENABLED) {
		LCD5110_print("Send: ", BLACK, &lcd1);
		LCD5110_print((char *)TxData, BLACK, &lcd1); // the command we sent
    }
    HAL_Delay(1200);

    HAL_UART_Transmit(SIM800L_UART_INSTANCE, TxData, strlen((char *)TxData), 1000); // Надсилаємо через UART
    LCD5110_clear_scr(&lcd1);
}

void sim800l_send_text(const char *text) {
    snprintf((char *)TxData, sizeof(TxData), "%s", text); // Без \r\n
    if (SIM800L_LCD_OUTPUT_ENABLED) {
    		LCD5110_print("Send: ", BLACK, &lcd1);
    		LCD5110_print((char *)TxData, BLACK, &lcd1); // the command we sent
        }
    HAL_Delay(1200);
    HAL_UART_Transmit(SIM800L_UART_INSTANCE, TxData, strlen((char *)TxData), 1000);
}
bool sim800l_receive_response(char *buffer, size_t size, uint32_t timeout) {
    uint32_t start_tick = HAL_GetTick();
    while (!data_ready) {
        if ((HAL_GetTick() - start_tick) > timeout) {
            return 0; // Таймаут
        }
    }

    // Копіюємо дані у вказаний буфер
    strncpy(buffer, (char *)RxData, size);
    buffer[size - 1] = '\0'; // Гарантуємо, що рядок закінчується '\0'

    // Скидаємо прапорець і очищаємо буфер
    data_ready = 0;
    memset(RxData, 0, sizeof(RxData));
    rx_index = 0;

    return 1; // Успіх
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
    if (huart == SIM800L_UART_INSTANCE) { // Перевірка, що переривання з потрібного UART
        if (rx_index < sizeof(RxData) - 1) {
            RxData[rx_index++] = rx_byte; // Додаємо отриманий байт у буфер
            if (rx_byte == '\n') { // Закінчення рядка
                RxData[rx_index] = '\0'; // Завершуємо рядок
                data_ready = 1; // Дані готові
            }
        } else {
            rx_index = 0; // Переповнення буфера, скидаємо індекс
        }

        // Запускаємо прийом наступного байту
        HAL_UART_Receive_IT(huart, &rx_byte, 1);
    }
}

void clear_buffs_flags(){
	memset(TxData, 0, sizeof(TxData));
	memset(RxData, 0, sizeof(RxData));
	rx_index = 0;
	data_ready = 0;
}

void sim800l_init(UART_HandleTypeDef *uart_handle) {
	if (SIM800L_LCD_OUTPUT_ENABLED) {
		LCD5110_print("Initializing of SIM800L\n", BLACK, &lcd1);
	}
	HAL_Delay(1000);
	LCD5110_clear_scr(&lcd1);
    clear_buffs_flags(); // очистка буферів та флажків
    // Запуск прийому в режимі інтераптів
    HAL_UART_Receive_IT(SIM800L_UART_INSTANCE, &rx_byte, 1);
    sim800l_send_command("AT");  // Надсилаємо тестову команду AT
    HAL_Delay(500);

    // Перевіряємо відповідь
    if (data_ready && strstr((char *)RxData, "OK")) {
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
        if (SIM800L_LCD_OUTPUT_ENABLED) {
			LCD5110_print((char *)RxData, BLACK, &lcd1);
			LCD5110_print("The module is initialised\n", BLACK, &lcd1);
        }
        HAL_Delay(1000);
    } else {
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
        if (SIM800L_LCD_OUTPUT_ENABLED) {
        	LCD5110_print("No response :(\n", BLACK, &lcd1);
        }
        HAL_Delay(1000);
        LCD5110_clear_scr(&lcd1);
    }

//    memset(RxData, 0, sizeof(RxData)); // Очищаємо буфер прийому
}

void send_pin(const char *pincode) {
	char pincom[20];
	snprintf(pincom, sizeof(pincom), "AT+CPIN=\"%s\"", pincode);
	if (SIM800L_LCD_OUTPUT_ENABLED) {
		LCD5110_print("Sending the pincode", BLACK, &lcd1);
	}
	sim800l_send_command(pincom);
}

void check_net() {
	sim800l_send_command("AT+CREG?");
}

//void what_


void send_sms(const char *phone_number, const char *message) {
	char command[64];
	// Set the module in text mode sms
	sim800l_send_command("AT+CMGF=1");
	HAL_Delay(2000);

	snprintf(command, sizeof(command), "AT+CMGS=\"%s\"", phone_number);
	sim800l_send_command(command);
	HAL_Delay(2000);

	// send the message and the termination symbols Ctrl+Z (0x1A)
	sim800l_send_command(message);
	HAL_UART_Transmit(SIM800L_UART_INSTANCE, (uint8_t *)"\x1A", 1, HAL_MAX_DELAY); // Ctrl+Z
	HAL_Delay(5000);

	if (!strstr((char *)RxData, "OK")) {
		LCD5110_print("PIN Error", WHITE, &lcd1);
		return;
	}
//void rats(void){
//	send_pin("1111");
//}
}

void what_manuf() {
	sim800l_send_command("AT+CGMI");
}

void what_model() {
	sim800l_send_command("AT+CGMM");
}

void what_rev() {
	sim800l_send_command("AT+CGMR");
}

void what_imei() {
	sim800l_send_command("AT+GSN");
}

void signal_rate() {
	clear_buffs_flags();
	sim800l_send_command("AT+CSQ");
	// "+CSQ: <rssi>,<ber>" - need find rssi from the responce
	int rssi = -1; // the init value of signal
	HAL_Delay(200);
	LCD5110_print((char *)RxData, BLACK, &lcd1);
	sscanf((char *)RxData, "+CSQ: %d,", &rssi);

	// Діапазони рівнів сигналу
	if (rssi > 0 && rssi <= 10) {
		// Слабкий сигнал
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
	} else if (rssi >= 11 && rssi <= 20) {
		// Середній сигнал
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
	} else if (rssi >= 21 && rssi <= 31) {
		// Strong signal
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
	} else {
		// No signal or Error
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
	}
}
void check_net_reg() {
	sim800l_send_command("AT+CREG?");
}
void check_sim() {
	sim800l_send_command("AT+CPIN?");
}

void get_baud_rate(){
	sim800l_send_command("AT+IPR?");// show the current baud rate
}
//void set_baud_rate();
void get_oper_mode() {
	sim800l_send_command("AT+CFUN?");
}
//void set_oper_mode(); // set the operation mode;
void set_default() {
	sim800l_send_command("AT&F");
}

void curr_moper_info(){
	sim800l_send_command("AT+COPS?");
}
void find_moper() {
	sim800l_send_command("AT+COPS=?");
}

void time_check() {
	sim800l_send_command("AT+CBAND?");
}

void power_rate() {
	sim800l_send_command("AT+CBC");
}

void sms_set_text_mode() {
    sim800l_send_command("AT+CMGF=1");
}

void sms_send(const char *phone_number, const char *message) {
	clear_buffs_flags();
	char command[32];
	snprintf(command, sizeof(command), "AT+CMGS=\"%s\"", phone_number);
	sim800l_send_command(command);
	HAL_Delay(150);
	sim800l_send_text(message);
	HAL_Delay(150);
	sim800l_send_text("\x1A");  // termination symbols
	HAL_Delay(150);
}

void sms_check_all() {
	sim800l_send_command("AT+CMGL=\"ALL\"");
}

void make_call(const char *phone_number) {
	clear_buffs_flags();
	char command[32];
	snprintf(command, sizeof(command), "ATD%s;", phone_number);
	sim800l_send_command(command);
	HAL_Delay(1000);
}

void make_call_ext(const char *phone_number) {
	clear_buffs_flags();

	sim800l_init(SIM800L_UART_INSTANCE);  //Check sim800l - uart - device connection
	HAL_Delay(200);
	sim800l_echo('0'); // turn off the mode echo of sim800l
	signal_rate();
	check_net_reg();
	check_sim();

	make_call(phone_number);
	LCD5110_print("Making call...", BLACK, &lcd1);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET); // means calling process is activeted
	HAL_Delay(15000); // Час на дзвінок (10 секунд)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET); // means calling process is finished
	LCD5110_print("Calling is finished", BLACK, &lcd1);
}

void sim800l_echo(const char mode) {
	if (mode == '0') {
		// Turn echo off
		sim800l_send_command("ATE0");
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
	} else if (mode == '1') {
		// Turn echo on
		sim800l_send_command("ATE1");
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
	} else {
		// Invalid mode
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);

		LCD5110_print("Invalid mode", BLACK, &lcd1);
	}
}

void change_lcd_output(int enable) {
    if (enable == 1) {
        SIM800L_LCD_OUTPUT_ENABLED = 1;
    } else {
        SIM800L_LCD_OUTPUT_ENABLED = 0;
    }
}

















