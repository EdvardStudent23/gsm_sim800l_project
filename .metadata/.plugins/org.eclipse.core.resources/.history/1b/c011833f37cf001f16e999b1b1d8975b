/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "spi.h"
#include "usart.h"
#include "usb.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "sim800l_lib.h"
#include <string.h>
#include <stdint.h>
#include <stdio.h>

#include "lcd5110.h"
#include "lcd_shared.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define PHONE_NUMBER "+380984708845";
#define SMS "SIM800 - hello";

LCD5110_display lcd1;
//uint8_t RxData[64];
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
//uint8_t TxData[64];
//uint8_t RxData[64];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
	void send_sms(const char *phone_number, const char *message) {
	    char command[64];

	    // Перевести модуль у текстовий режим
	    sim800l_send_command("AT+CMGF=1");
	    HAL_Delay(2000);

	    // Налаштувати номер отримувача
	    snprintf(command, sizeof(command), "AT+CMGS=\"%s\"", phone_number);
	    sim800l_send_command(command);
	    HAL_Delay(2000);

	    // Надіслати текст повідомлення, закінчуючи символом Ctrl+Z (0x1A)
	    sim800l_send_command(message);
	    HAL_UART_Transmit(&huart2, (uint8_t *)"\x1A", 1, HAL_MAX_DELAY); // Ctrl+Z
	    HAL_Delay(5000);
	}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_USB_PCD_Init();
  MX_USART2_UART_Init();
  MX_SPI2_Init();
  /* USER CODE BEGIN 2 */
//  strcpy((char *) TxData, "AT\n\r");
  lcd1.hw_conf.spi_handle = &hspi2;
    lcd1.hw_conf.spi_cs_pin =  LCD1_CS_Pin;
    lcd1.hw_conf.spi_cs_port = LCD1_CS_GPIO_Port;
    lcd1.hw_conf.rst_pin =  LCD1_RST_Pin;
    lcd1.hw_conf.rst_port = LCD1_RST_GPIO_Port;
    lcd1.hw_conf.dc_pin =  LCD1_DC_Pin;
    lcd1.hw_conf.dc_port = LCD1_DC_GPIO_Port;
    lcd1.def_scr = lcd5110_def_scr;
    HAL_Delay(200);
//    LCD5110_init(&lcd1.hw_conf, LCD5110_NORMAL_MODE, 0x40, 2, 3);
	LCD5110_init(&lcd1.hw_conf, LCD5110_NORMAL_MODE, 0x40, 2, 3);

//    LCD5110_print("Hello world!\n", BLACK, &lcd1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

//	  HAL_Delay(2000);
	  while(1) {
		  sim800l_send_command("ATE0");
		  HAL_Delay(500);
		  sim800l_init(&huart2);
		  HAL_Delay(500);
	//	  LCD5110_print("Hello world!\n", BLACK, &lcd1);
		  HAL_Delay(1000);
		  LCD5110_clear_scr(&lcd1);
		  HAL_Delay(1000);
		  LCD5110_print((char *)RxData, WHITE, &lcd1);
		  HAL_Delay(3000);
		  if (strstr((char *)RxData, "OK")) {
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
			  break;
		  }
	  }
	  HAL_Delay(2000);
	  LCD5110_clear_scr(&lcd1);
	  clear_buffs_flags();


//	  while(1) {

//		  send_pin("1865");
//		  if (strstr((char *)RxData, "OK\r\n")) {
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
			  LCD5110_print((char *)RxData, WHITE, &lcd1);
			  HAL_Delay(1000);
//			  LCD5110_print("PIN code is sent", BLACK, &lcd1);
//			  HAL_Delay(1000);
//			  break;
//		  }
//	  }
	  clear_buffs_flags();
	  LCD5110_clear_scr(&lcd1);

	  HAL_Delay(5000);
//	  while(1) {
////		  send_pin("1865");
//		  sim800l_send_command("AT+COPS=1,0,\"Astelit\"");
//		  HAL_Delay(5000);
//		  LCD5110_clear_scr(&lcd1);
//
//		  sim800l_send_command("AT+COPS=?");
//		  HAL_Delay(5000);
//		  sim800l_send_command("AT+CREG?");
//		  LCD5110_print((char *)RxData, BLACK, &lcd1);
//
////		  LCD5110_print((char *)RxData, BLACK, &lcd1);
////		  HAL_Delay(5000);
//	  }
//	  break;
	  // Вибір оператора
	  while(1) {
		  sim800l_send_command("AT+CBC");
		  HAL_Delay(500);
		  LCD5110_print((char *)RxData, BLACK, &lcd1);
		  HAL_Delay(5000);
		  LCD5110_clear_scr(&lcd1);
	  }
	         sim800l_send_command("AT+COPS=1,0,\"Astelit\"");
	         HAL_Delay(5000);
	         LCD5110_clear_scr(&lcd1);

	         // Перевірка доступних операторів
	         sim800l_send_command("AT+COPS=?");
	         HAL_Delay(5000);

	         // Перевірка реєстрації
	         sim800l_send_command("AT+CREG?");
	         LCD5110_print((char *)RxData, BLACK, &lcd1);
	         HAL_Delay(5000);

	         // Надсилання SMS
//	         send_sms("+380984708845", "Hello from SIM800L!");
//	         HAL_Delay(20000); // Затримка між циклами

//	  while(1) {
//		  check_net();



//	  LCD5110_print("Out ", BLACK, &lcd1);

//	  LCD5110_print("beeeebra!\n", BLACK, &lcd1);
//	  HAL_Delay(1000);
//	  LCD5110_clear_scr(&lcd1);
//	  LCD5110_clear_scr(&lcd1);
//	  if (ok) {
//	  break;
//	  }
//	  }
//
//	  продовжуємо

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  sim800l_send_command("AT+GMR");
//	  HAL_Delay(500);
//
//	  char response[64]; // Буфер для відповіді
//	  if (sim800l_receive_response(response, sizeof(response), 1000)) {
//		  // Відповідь успішно отримана
//		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET); // Зелений LED ON
//		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
//		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
//		  printf("Response: %s\n", response); // Вивід відповіді у консоль (для налагодження)
//	  } else {
//		  // Таймаут
//		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET); // Зелений LED ON
//		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
//		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
//		  printf("No response or timeout.\n");
//	  }
//
//	  HAL_Delay(5000);

//	  =================
//	  HAL_UART_Transmit(&huart2, TxData, sizeof(TxData), 300);
//	  HAL_UART_Transmit(&huart2, TxData, strlen((char *)TxData), 300);
////	  може оце правильно   HAL_UART_Transmit(&huart2, TxData, 4, 300);
//
//	  HAL_UART_Receive(&huart2, RxData, sizeof(RxData), 1000);
//
//	  if (strstr((char *) RxData, "OK"))
//	  {
//		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
//		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
//	  }
//	  else
//	  {
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
//	  }
//	 memset(RxData, 0, sizeof(RxData));
//	 HAL_Delay(1000);
	  //=======================
	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
